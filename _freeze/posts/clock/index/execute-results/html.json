{
  "hash": "c54cc7f6018b6f05b8bc231e7762d785",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Building a Simple Digital Clock with JavaScript\"\ndate: \"12/30/2024\"\ncategories: [ applications ]\n---\n\n\n\n\nCreating a digital clock is an excellent way to learn about JavaScript's date handling and DOM manipulation capabilities. In this tutorial, we'll build a straightforward yet functional digital clock that updates in real-time.\n\n\n\n\n\n```{html}\n<style>\n.clock {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    color: #17D4FE;\n    font-size: 60px;\n    font-family: Orbitron;\n    letter-spacing: 7px;\n}\n</style>\n<div id=\"MyClockDisplay\" class=\"clock\" onload=\"showTime()\"></div>\n<script>\nfunction showTime(){\n    var date = new Date();\n    var h = date.getHours(); // 0 - 23\n    var m = date.getMinutes(); // 0 - 59\n    var s = date.getSeconds(); // 0 - 59\n    var session = \"AM\";\n    \n    if(h == 0){\n        h = 12;\n    }\n    \n    if(h > 12){\n        h = h - 12;\n        session = \"PM\";\n    }\n    \n    h = (h < 10) ? \"0\" + h : h;\n    m = (m < 10) ? \"0\" + m : m;\n    s = (s < 10) ? \"0\" + s : s;\n    \n    var time = h + \":\" + m + \":\" + s + \" \" + session;\n    document.getElementById(\"MyClockDisplay\").innerText = time;\n    document.getElementById(\"MyClockDisplay\").textContent = time;\n    \n    setTimeout(showTime, 1000);\n    \n}\nshowTime();\n</script>\n```\n\n\n\n\n\n## Understanding the Basics\n\nThe core of our clock relies on JavaScript's `Date` object, which provides methods to access the current time. Our implementation displays hours, minutes, and seconds in a 12-hour format with AM/PM indicators.\n\n## Key Components\n\nOur clock consists of two main parts:\n1. The HTML element that displays the time\n2. The JavaScript function that updates the time\n\nFirst, you'll need to add this HTML element to your page:\n\n```html\n<div id=\"MyClockDisplay\" class=\"clock\"></div>\n```\n\n## The JavaScript Implementation\n\nLet's break down the `showTime()` function that powers our clock:\n\n```javascript\nfunction showTime() {\n    var date = new Date();\n    var h = date.getHours();    // Get current hour (0-23)\n    var m = date.getMinutes();  // Get current minutes (0-59)\n    var s = date.getSeconds();  // Get current seconds (0-59)\n    var session = \"AM\";\n}\n```\n\nThis initializes our time variables using JavaScript's Date object. The function then handles the 12-hour format conversion:\n\n```javascript\nif(h == 0){\n    h = 12;\n}\nif(h > 12){\n    h = h - 12;\n    session = \"PM\";\n}\n```\n\nTo ensure consistent formatting, we add leading zeros to single-digit numbers:\n\n```javascript\nh = (h < 10) ? \"0\" + h : h;\nm = (m < 10) ? \"0\" + m : m;\ns = (s < 10) ? \"0\" + s : s;\n```\n\nFinally, we update the display and set up the clock to update every second:\n\n```javascript\nvar time = h + \":\" + m + \":\" + s + \" \" + session;\ndocument.getElementById(\"MyClockDisplay\").innerText = time;\ndocument.getElementById(\"MyClockDisplay\").textContent = time;\n\nsetTimeout(showTime, 1000);\n```\n\n## Styling Your Clock\n\nTo make your clock visually appealing, you can add some CSS:\n\n```css\n.clock {\n    font-family: Arial, sans-serif;\n    font-size: 60px;\n    color: #17D4FE;\n    background: #000;\n    padding: 20px;\n    border-radius: 4px;\n}\n```\n\n## How It Works\n\n1. The script creates a new Date object every second\n2. It extracts hours, minutes, and seconds from this object\n3. Converts the 24-hour format to 12-hour format\n4. Adds leading zeros where necessary\n5. Updates the display\n6. Uses setTimeout to call itself again after 1 second\n\n## Common Challenges and Solutions\n\n1. **Time Drift**: Over time, setTimeout can drift slightly. For more precise timing, you might want to use `setInterval` instead.\n\n2. **Browser Compatibility**: The code uses both innerText and textContent for maximum browser compatibility.\n\n3. **Performance**: The function creates new variables every second. For larger applications, you might want to optimize this by declaring variables outside the function.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}