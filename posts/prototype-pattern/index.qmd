---
title: "Prototype Pattern"
date: "09/21/2024"
categories: [ designpatterns ]
---

The Prototype pattern is a creational design pattern that allows you to create new objects by copying existing objects, rather than creating them from scratch.  This is particularly useful when object creation is expensive or complex, or when you need to ensure consistency between objects.  Instead of repeatedly instantiating objects using constructors, you create a prototype object and clone it as needed. This approach significantly improves performance and reduces code duplication.


## When to Use the Prototype Pattern

Consider using the Prototype pattern when:

* **Object creation is a resource-intensive process:**  Creating objects might involve complex calculations or external resource access. Cloning an existing object is much faster.
* **You need to create many similar objects:**  The pattern avoids repetitive instantiation, leading to cleaner and more efficient code.
* **You want to ensure consistency among objects:**  All cloned objects inherit the properties and methods of the prototype.
* **Class structure is complex or difficult to modify:**  Prototypes provide a flexible way to add new features or behaviors without altering the original class definition.

## Implementing the Prototype Pattern in JavaScript

JavaScript's prototype-based inheritance makes it particularly well-suited for implementing the Prototype pattern.  Here's a basic example:

```javascript
function Car(model, color) {
  this.model = model;
  this.color = color;
}

Car.prototype.drive = function() {
  console.log(`Driving a ${this.color} ${this.model}`);
};

// Create a prototype car
const prototypeCar = new Car('Toyota Camry', 'Silver');

// Function to clone the prototype
function clone(obj) {
  return Object.assign({}, obj); //Creates a shallow copy
}


// Create new cars by cloning the prototype
const car1 = clone(prototypeCar);
car1.color = 'Red';

const car2 = clone(prototypeCar);
car2.model = 'Honda Civic';

car1.drive(); // Output: Driving a Red Toyota Camry
car2.drive(); // Output: Driving a Silver Honda Civic
```

In this example, `prototypeCar` acts as our prototype.  The `clone` function creates a shallow copy of the prototype.  Changes to `car1` and `car2` don't affect the prototype or each other.

## Dealing with Nested Objects: Deep Cloning

The above `clone` function performs a shallow copy. For nested objects, you'll need a deep clone.  This is more complex, and requires handling circular references to avoid infinite loops.  Here's a simplified approach using `JSON.parse` and `JSON.stringify`:

```javascript
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

//Example with nested object
function Person(name, address) {
  this.name = name;
  this.address = address;
}

const prototypePerson = new Person('John Doe', {street: '123 Main St', city: 'Anytown'});

const person1 = deepClone(prototypePerson);
person1.address.city = 'New City';

console.log(prototypePerson.address.city); // Anytown
console.log(person1.address.city); // New City
```

This method utilizes JSON serialization and deserialization to create a deep copy.  However, keep in mind this approach has limitations:  It won't work with functions, dates, or other non-serializable objects. For more robust deep cloning, consider using dedicated libraries.


## Prototype Pattern with Constructor Functions and `Object.create()`

You can also leverage `Object.create()` for a more direct approach:

```javascript
function Car(model, color) {
  this.model = model;
  this.color = color;
}

Car.prototype.drive = function() {
  console.log(`Driving a ${this.color} ${this.model}`);
};

const prototypeCar = new Car('Ford Focus', 'Blue');
const car3 = Object.create(prototypeCar);
car3.color = 'Green';

car3.drive(); // Output: Driving a Green Ford Focus

```

`Object.create()` directly creates a new object with the specified prototype, offering a cleaner way to implement the pattern.  Remember to define methods on the prototype (e.g., `Car.prototype.drive`) for them to be available to cloned instances.


## Advanced Considerations

The choice between shallow and deep cloning depends on your specific needs.  Shallow cloning is faster but might not be suitable when dealing with nested objects. Deep cloning is more comprehensive but can be slower and more memory-intensive.  Furthermore, for very complex objects or objects with circular references, specialized libraries are often necessary for effective deep cloning.

