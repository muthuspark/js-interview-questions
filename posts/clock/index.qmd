---
title: "Building a Simple Digital Clock with JavaScript"
date: "12/30/2024"
categories: [ applications ]
---

Creating a digital clock is an excellent way to learn about JavaScript's date handling and DOM manipulation capabilities. In this tutorial, we'll build a straightforward yet functional digital clock that updates in real-time.


```{=html}
<style>
.clock {
    margin: 20px 0;
    font-size: 60px;
    color: #17D4FE;
    background: #000;
    padding: 20px;
    border-radius: 4px;
    text-align: center;
}
</style>
<div id="MyClockDisplay" class="clock" onload="showTime()"></div>
<script>
function showTime(){
    var date = new Date();
    var h = date.getHours(); // 0 - 23
    var m = date.getMinutes(); // 0 - 59
    var s = date.getSeconds(); // 0 - 59
    var session = "AM";
    
    if(h == 0){
        h = 12;
    }
    
    if(h > 12){
        h = h - 12;
        session = "PM";
    }
    
    h = (h < 10) ? "0" + h : h;
    m = (m < 10) ? "0" + m : m;
    s = (s < 10) ? "0" + s : s;
    
    var time = h + ":" + m + ":" + s + " " + session;
    document.getElementById("MyClockDisplay").innerText = time;
    document.getElementById("MyClockDisplay").textContent = time;
    
    setTimeout(showTime, 1000);
    
}
showTime();
</script>
```


## Understanding the Basics

The core of our clock relies on JavaScript's `Date` object, which provides methods to access the current time. Our implementation displays hours, minutes, and seconds in a 12-hour format with AM/PM indicators.

## Key Components

Our clock consists of two main parts:
1. The HTML element that displays the time
2. The JavaScript function that updates the time

First, you'll need to add this HTML element to your page:

```html
<div id="MyClockDisplay" class="clock"></div>
```

## The JavaScript Implementation

Let's break down the `showTime()` function that powers our clock:

```javascript
function showTime() {
    var date = new Date();
    var h = date.getHours();    // Get current hour (0-23)
    var m = date.getMinutes();  // Get current minutes (0-59)
    var s = date.getSeconds();  // Get current seconds (0-59)
    var session = "AM";
}
```

This initializes our time variables using JavaScript's Date object. The function then handles the 12-hour format conversion:

```javascript
if(h == 0){
    h = 12;
}
if(h > 12){
    h = h - 12;
    session = "PM";
}
```

To ensure consistent formatting, we add leading zeros to single-digit numbers:

```javascript
h = (h < 10) ? "0" + h : h;
m = (m < 10) ? "0" + m : m;
s = (s < 10) ? "0" + s : s;
```

Finally, we update the display and set up the clock to update every second:

```javascript
var time = h + ":" + m + ":" + s + " " + session;
document.getElementById("MyClockDisplay").innerText = time;
document.getElementById("MyClockDisplay").textContent = time;

setTimeout(showTime, 1000);
```

## Styling Your Clock

To make your clock visually appealing, you can add some CSS:

```css
.clock {
    font-family: Arial, sans-serif;
    font-size: 60px;
    color: #17D4FE;
    background: #000;
    padding: 20px;
    border-radius: 4px;
}
```

## How It Works

1. The script creates a new Date object every second
2. It extracts hours, minutes, and seconds from this object
3. Converts the 24-hour format to 12-hour format
4. Adds leading zeros where necessary
5. Updates the display
6. Uses setTimeout to call itself again after 1 second

## Common Challenges and Solutions

1. **Time Drift**: Over time, setTimeout can drift slightly. For more precise timing, you might want to use `setInterval` instead.

2. **Browser Compatibility**: The code uses both innerText and textContent for maximum browser compatibility.

3. **Performance**: The function creates new variables every second. For larger applications, you might want to optimize this by declaring variables outside the function.